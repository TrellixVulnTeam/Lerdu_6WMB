// -*- c++ -*-
// Generated by gtkmmproc -- DO NOT MODIFY!
#ifndef _GSTREAMERMM_CDDABASESRC_H
#define _GSTREAMERMM_CDDABASESRC_H


#include <glibmm.h>

/* gstreamermm - a C++ wrapper for gstreamer
 *
 * Copyright 2008 The gstreamermm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */
 
#include <gst/cdda/gstcddabasesrc.h>
#include <gstreamermm/pushsrc.h>
#include <gstreamermm/taglist.h>


#ifndef DOXYGEN_SHOULD_SKIP_THIS
typedef struct _GstCddaBaseSrc GstCddaBaseSrc;
typedef struct _GstCddaBaseSrcClass GstCddaBaseSrcClass;
#endif /* DOXYGEN_SHOULD_SKIP_THIS */


namespace Gst
{ class CddaBaseSrc_Class; } // namespace Gst
namespace Gst
{

/** @addtogroup gstreamermmEnums gstreamermm Enums and Flags */

/**
 * @ingroup gstreamermmEnums
 */
enum CddaBaseSrcMode
{
  CDDA_BASE_SRC_MODE_NORMAL,
  CDDA_BASE_SRC_MODE_CONTINUOUS
};

} // namespace Gst


#ifndef DOXYGEN_SHOULD_SKIP_THIS
namespace Glib
{

template <>
class Value<Gst::CddaBaseSrcMode> : public Glib::Value_Enum<Gst::CddaBaseSrcMode>
{
public:
  static GType value_type() G_GNUC_CONST;
};

} // namespace Glib
#endif /* DOXYGEN_SHOULD_SKIP_THIS */


namespace Gst
{


/** A base class for CD digital audio (CDDA) sources.
 * Provides a base class for CDDA sources, which handles things like seeking,
 * querying, discid calculation, tags, and buffer timestamping.
 *
 * Gst::CddaBaseSrc registers two Gst::Formats of its own, namely the
 * "track" format and the "sector" format. Applications will usually only find
 * the "track" format interesting. You can retrieve that Gst::Format for use in
 * seek events or queries with Gst::get_format("track").
 *
 * In order to query the number of tracks, for example, an application would
 * set the CDDA source element to READY or PAUSED state and then query the the
 * number of tracks via Gst::Element::query_duration() using the track format
 * acquired above. Applications can query the currently playing track in the
 * same way.
 *
 * Alternatively, applications may retrieve the currently playing track and the
 * total number of tracks from the taglist that will be posted on the bus
 * whenever the CD is opened or the currently playing track changes. The
 * taglist will contain Gst::TAG_TRACK_NUMBER and Gst::TAG_TRACK_COUNT tags.
 *
 * Applications playing back CD audio using playbin and cdda://n URIs should
 * issue a seek command in track format to change between tracks, rather than
 * setting a new cdda://n+1 URI on playbin (as setting a new URI on playbin
 * involves closing and re-opening the CD device, which is much much slower).
 *
 * CDDA sources will automatically emit a number of tags, details about which
 * can be found in the libgsttag documentation. Those tags are:
 * Gst::TAG_CDDA_CDDB_DISCID, Gst::TAG_CDDA_CDDB_DISCID_FULL,
 * Gst::TAG_CDDA_MUSICBRAINZ_DISCID, Gst::TAG_CDDA_MUSICBRAINZ_DISCID_FULL,
 * among others.
 *
 * @ingroup GstBaseClasses
 */

class CddaBaseSrc : public Gst::PushSrc
{
  
#ifndef DOXYGEN_SHOULD_SKIP_THIS

public:
  typedef CddaBaseSrc CppObjectType;
  typedef CddaBaseSrc_Class CppClassType;
  typedef GstCddaBaseSrc BaseObjectType;
  typedef GstCddaBaseSrcClass BaseClassType;

private:  friend class CddaBaseSrc_Class;
  static CppClassType cddabasesrc_class_;

private:
  // noncopyable
  CddaBaseSrc(const CddaBaseSrc&);
  CddaBaseSrc& operator=(const CddaBaseSrc&);

protected:
  explicit CddaBaseSrc(const Glib::ConstructParams& construct_params);
  explicit CddaBaseSrc(GstCddaBaseSrc* castitem);

#endif /* DOXYGEN_SHOULD_SKIP_THIS */

public:
  virtual ~CddaBaseSrc();

#ifndef DOXYGEN_SHOULD_SKIP_THIS
  static GType get_type()      G_GNUC_CONST;


  static GType get_base_type() G_GNUC_CONST;
#endif

  ///Provides access to the underlying C GObject.
  GstCddaBaseSrc*       gobj()       { return reinterpret_cast<GstCddaBaseSrc*>(gobject_); }

  ///Provides access to the underlying C GObject.
  const GstCddaBaseSrc* gobj() const { return reinterpret_cast<GstCddaBaseSrc*>(gobject_); }

  ///Provides access to the underlying C instance. The caller is responsible for unrefing it. Use when directly setting fields in structs.
  GstCddaBaseSrc* gobj_copy();

private:


public:
  /** CDDA sources use this function from their start vfunc to announce the
   * available data and audio tracks to the base source class.
   *
   * @param num Track number in TOC (usually starts from 1, but not always).
   * @param start The first sector of the track (LBA).
   * @param end The last sector of the track (LBA).
   * @param is_audio Whether this is an audio track.
   * @param tags Track-specific tags (e.g. from cd-text information).
   * @return false on error, otherwise true.
   */
  bool add_track(guint num, guint start, guint end, bool is_audio = true,
    const Gst::TagList& tags = Gst::TagList());
  

  #ifdef GLIBMM_PROPERTIES_ENABLED
/** CD device location.
   *
   * You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   */
  Glib::PropertyProxy<std::string> property_device() ;
#endif //#GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
/** CD device location.
   *
   * You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly<std::string> property_device() const;
#endif //#GLIBMM_PROPERTIES_ENABLED

  #ifdef GLIBMM_PROPERTIES_ENABLED
/** Mode.
   *
   * You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   */
  Glib::PropertyProxy<CddaBaseSrcMode> property_mode() ;
#endif //#GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
/** Mode.
   *
   * You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly<CddaBaseSrcMode> property_mode() const;
#endif //#GLIBMM_PROPERTIES_ENABLED

  #ifdef GLIBMM_PROPERTIES_ENABLED
/** Track.
   *
   * You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   */
  Glib::PropertyProxy<guint> property_track() ;
#endif //#GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
/** Track.
   *
   * You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly<guint> property_track() const;
#endif //#GLIBMM_PROPERTIES_ENABLED


  /** Virtual function to open a CD device.
   */
   virtual bool open_vfunc(std::string& device);

  /** Virtual function to close the device.
   */
    virtual void close_vfunc();


  /** Virtual function to read one sector (LBA).
   */
    virtual Glib::RefPtr<Gst::Buffer> read_sector_vfunc(gint sector);


  /** Virtual function to get default device.  It is optional and may return
   * an empty string.
   */
    virtual std::string get_default_device_vfunc() const;


  /** Virtual function to return array of CD devices.  It is optional and may
   * return an empty array.
   */
  virtual Glib::ArrayHandle<std::string> probe_devices_vfunc();

protected:

  
public:

public:
  //C++ methods used to invoke GTK+ virtual functions:

protected:
  //GTK+ Virtual Functions (override these to change behaviour):

  //Default Signal Handlers::


};

} // namespace Gst


namespace Glib
{
  /** A Glib::wrap() method for this object.
   * 
   * @param object The C instance.
   * @param take_copy False if the result should take ownership of the C instance. True if it should take a new copy or ref.
   * @result A C++ instance that wraps this C instance.
   *
   * @relates Gst::CddaBaseSrc
   */
  Glib::RefPtr<Gst::CddaBaseSrc> wrap(GstCddaBaseSrc* object, bool take_copy = false);
}


#endif /* _GSTREAMERMM_CDDABASESRC_H */

