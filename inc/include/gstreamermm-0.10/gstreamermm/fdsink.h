// -*- c++ -*-
// Generated by gtkmmproc -- DO NOT MODIFY!
#ifndef _GSTREAMERMM_FDSINK_H
#define _GSTREAMERMM_FDSINK_H


#include <glibmm.h>

// Generated by generate_plugin_gmmproc_file. Don't edit this file.


#include <gstreamermm/basesink.h>
#include <gstreamermm/urihandler.h>


#ifndef DOXYGEN_SHOULD_SKIP_THIS
typedef struct _GstFdSink GstFdSink;
typedef struct _GstFdSinkClass GstFdSinkClass;
#endif /* DOXYGEN_SHOULD_SKIP_THIS */


namespace Gst
{ class FdSink_Class; } // namespace Gst
namespace Gst
{

/** A Wrapper for the fdsink plugin.
 * Please note that, though using the underlying GObject is fine, using its C
 * <B>type</B> is not guaranteed to be API stable across releases because it is
 * not guaranteed to always remain the same.  Also, not all plug-ins are
 * available on all systems so care must be taken that they exist before they
 * are used, otherwise there will be errors and possibly a crash.
 *
 * @ingroup GstPlugins
 */

class FdSink
: public Gst::BaseSink, public Gst::URIHandler
{
  
#ifndef DOXYGEN_SHOULD_SKIP_THIS

public:
  typedef FdSink CppObjectType;
  typedef FdSink_Class CppClassType;
  typedef GstFdSink BaseObjectType;
  typedef GstFdSinkClass BaseClassType;

private:  friend class FdSink_Class;
  static CppClassType fdsink_class_;

private:
  // noncopyable
  FdSink(const FdSink&);
  FdSink& operator=(const FdSink&);

protected:
  explicit FdSink(const Glib::ConstructParams& construct_params);
  explicit FdSink(GstFdSink* castitem);

#endif /* DOXYGEN_SHOULD_SKIP_THIS */

public:
  virtual ~FdSink();

#ifndef DOXYGEN_SHOULD_SKIP_THIS
  static GType get_type()      G_GNUC_CONST;


  static GType get_base_type() G_GNUC_CONST;
#endif

  ///Provides access to the underlying C GObject.
  GstFdSink*       gobj()       { return reinterpret_cast<GstFdSink*>(gobject_); }

  ///Provides access to the underlying C GObject.
  const GstFdSink* gobj() const { return reinterpret_cast<GstFdSink*>(gobject_); }

  ///Provides access to the underlying C instance. The caller is responsible for unrefing it. Use when directly setting fields in structs.
  GstFdSink* gobj_copy();

private:

  
protected:
  FdSink();
  explicit FdSink(const Glib::ustring& name);

public:
  /** Creates a new fdsink plugin with a unique name.
   */
  
  static Glib::RefPtr<FdSink> create();


  /** Creates a new fdsink plugin with the given name.
   */
  
  static Glib::RefPtr<FdSink> create(const Glib::ustring& name);


  #ifdef GLIBMM_PROPERTIES_ENABLED
/** An open file descriptor to write to.
   *
   * You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   */
  Glib::PropertyProxy<int> property_fd() ;
#endif //#GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
/** An open file descriptor to write to.
   *
   * You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly<int> property_fd() const;
#endif //#GLIBMM_PROPERTIES_ENABLED


public:

public:
  //C++ methods used to invoke GTK+ virtual functions:

protected:
  //GTK+ Virtual Functions (override these to change behaviour):

  //Default Signal Handlers::


};

} // namespace Gst


namespace Glib
{
  /** A Glib::wrap() method for this object.
   * 
   * @param object The C instance.
   * @param take_copy False if the result should take ownership of the C instance. True if it should take a new copy or ref.
   * @result A C++ instance that wraps this C instance.
   *
   * @relates Gst::FdSink
   */
  Glib::RefPtr<Gst::FdSink> wrap(GstFdSink* object, bool take_copy = false);
}


#endif /* _GSTREAMERMM_FDSINK_H */

