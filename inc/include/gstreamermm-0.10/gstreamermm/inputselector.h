// -*- c++ -*-
// Generated by gtkmmproc -- DO NOT MODIFY!
#ifndef _GSTREAMERMM_INPUTSELECTOR_H
#define _GSTREAMERMM_INPUTSELECTOR_H


#include <glibmm.h>

// Generated by generate_plugin_gmmproc_file. Don't edit this file.


#include <gstreamermm/element.h>
#include <gstreamermm/pad.h>


#ifndef DOXYGEN_SHOULD_SKIP_THIS
typedef struct _GstInputSelector GstInputSelector;
typedef struct _GstInputSelectorClass GstInputSelectorClass;
#endif /* DOXYGEN_SHOULD_SKIP_THIS */


namespace Gst
{ class InputSelector_Class; } // namespace Gst
namespace Gst
{

/** A Wrapper for the input-selector plugin.
 * Please note that, though using the underlying GObject is fine, using its C
 * <B>type</B> is not guaranteed to be API stable across releases because it is
 * not guaranteed to always remain the same.  Also, not all plug-ins are
 * available on all systems so care must be taken that they exist before they
 * are used, otherwise there will be errors and possibly a crash.
 *
 * @ingroup GstPlugins
 */

class InputSelector
: public Gst::Element
{
  
#ifndef DOXYGEN_SHOULD_SKIP_THIS

public:
  typedef InputSelector CppObjectType;
  typedef InputSelector_Class CppClassType;
  typedef GstInputSelector BaseObjectType;
  typedef GstInputSelectorClass BaseClassType;

private:  friend class InputSelector_Class;
  static CppClassType inputselector_class_;

private:
  // noncopyable
  InputSelector(const InputSelector&);
  InputSelector& operator=(const InputSelector&);

protected:
  explicit InputSelector(const Glib::ConstructParams& construct_params);
  explicit InputSelector(GstInputSelector* castitem);

#endif /* DOXYGEN_SHOULD_SKIP_THIS */

public:
  virtual ~InputSelector();

#ifndef DOXYGEN_SHOULD_SKIP_THIS
  static GType get_type()      G_GNUC_CONST;


  static GType get_base_type() G_GNUC_CONST;
#endif

  ///Provides access to the underlying C GObject.
  GstInputSelector*       gobj()       { return reinterpret_cast<GstInputSelector*>(gobject_); }

  ///Provides access to the underlying C GObject.
  const GstInputSelector* gobj() const { return reinterpret_cast<GstInputSelector*>(gobject_); }

  ///Provides access to the underlying C instance. The caller is responsible for unrefing it. Use when directly setting fields in structs.
  GstInputSelector* gobj_copy();

private:

  
protected:
  InputSelector();
  explicit InputSelector(const Glib::ustring& name);

public:
  /** Creates a new input-selector plugin with a unique name.
   */
  
  static Glib::RefPtr<InputSelector> create();


  /** Creates a new input-selector plugin with the given name.
   */
  
  static Glib::RefPtr<InputSelector> create(const Glib::ustring& name);


  /** This is a convenience method for the action signal
   * signal_block().
   */
  gint64 block();


  #ifdef GLIBMM_PROPERTIES_ENABLED
/** The number of sink pads.
   *
   * You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly<guint> property_n_pads() const;
#endif //#GLIBMM_PROPERTIES_ENABLED


  #ifdef GLIBMM_PROPERTIES_ENABLED
/** The currently active sink pad.
   *
   * You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   */
  Glib::PropertyProxy< Glib::RefPtr<Gst::Pad> > property_active_pad() ;
#endif //#GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
/** The currently active sink pad.
   *
   * You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< Glib::RefPtr<Gst::Pad> > property_active_pad() const;
#endif //#GLIBMM_PROPERTIES_ENABLED


  /** This is an action signal which is designed to be used as a method.  To 
   * do that, use its convenience method, block().
   *
   * @par Prototype:
   * <tt>gint64 on_my_%block()</tt>
   */

  Glib::SignalProxy0< gint64 > signal_block();


  /**
   * @par Prototype:
   * <tt>void on_my_%switch(const Glib::RefPtr<Gst::Pad>& arg0, gint64 arg1, gint64 arg2)</tt>
   */

  Glib::SignalProxy3< void,const Glib::RefPtr<Gst::Pad>&,gint64,gint64 > signal_switch();


public:

public:
  //C++ methods used to invoke GTK+ virtual functions:

protected:
  //GTK+ Virtual Functions (override these to change behaviour):

  //Default Signal Handlers::


};

} // namespace Gst


namespace Glib
{
  /** A Glib::wrap() method for this object.
   * 
   * @param object The C instance.
   * @param take_copy False if the result should take ownership of the C instance. True if it should take a new copy or ref.
   * @result A C++ instance that wraps this C instance.
   *
   * @relates Gst::InputSelector
   */
  Glib::RefPtr<Gst::InputSelector> wrap(GstInputSelector* object, bool take_copy = false);
}


#endif /* _GSTREAMERMM_INPUTSELECTOR_H */

