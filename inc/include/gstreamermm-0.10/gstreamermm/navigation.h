// -*- c++ -*-
// Generated by gtkmmproc -- DO NOT MODIFY!
#ifndef _GSTREAMERMM_NAVIGATION_H
#define _GSTREAMERMM_NAVIGATION_H


#include <glibmm.h>

/* gstreamermm - a C++ wrapper for gstreamer
 *
 * Copyright 2008 The gstreamermm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#include <gst/interfaces/navigation.h>
#include <glibmm/interface.h>


#ifndef DOXYGEN_SHOULD_SKIP_THIS
typedef struct _GstNavigation GstNavigation;
typedef struct _GstNavigationClass GstNavigationClass;
#endif /* DOXYGEN_SHOULD_SKIP_THIS */


namespace Gst
{ class Navigation_Class; } // namespace Gst
namespace Gst
{

/** @addtogroup gstreamermmEnums gstreamermm Enums and Flags */

/**
 * @ingroup gstreamermmEnums
 */
enum NavigationCommand
{
  NAVIGATION_COMMAND_INVALID = 0,
  NAVIGATION_COMMAND_MENU1 = 1,
  NAVIGATION_COMMAND_MENU2 = 2,
  NAVIGATION_COMMAND_MENU3 = 3,
  NAVIGATION_COMMAND_MENU4 = 4,
  NAVIGATION_COMMAND_MENU5 = 5,
  NAVIGATION_COMMAND_MENU6 = 6,
  NAVIGATION_COMMAND_MENU7 = 7,
  NAVIGATION_COMMAND_LEFT = 20,
  NAVIGATION_COMMAND_RIGHT = 21,
  NAVIGATION_COMMAND_UP = 22,
  NAVIGATION_COMMAND_DOWN = 23,
  NAVIGATION_COMMAND_ACTIVATE = 24,
  NAVIGATION_COMMAND_PREV_ANGLE = 30,
  NAVIGATION_COMMAND_NEXT_ANGLE = 31
};

} // namespace Gst


#ifndef DOXYGEN_SHOULD_SKIP_THIS
namespace Glib
{

template <>
class Value<Gst::NavigationCommand> : public Glib::Value_Enum<Gst::NavigationCommand>
{
public:
  static GType value_type() G_GNUC_CONST;
};

} // namespace Glib
#endif /* DOXYGEN_SHOULD_SKIP_THIS */


namespace Gst
{


class Structure;

/** An interface for elements that provide navigation functionality.
 * @ingroup GstInterfaces
 */

class Navigation : public Glib::Interface
{
  
#ifndef DOXYGEN_SHOULD_SKIP_THIS

public:
  typedef Navigation CppObjectType;
  typedef Navigation_Class CppClassType;
  typedef GstNavigation BaseObjectType;
  typedef GstNavigationInterface BaseClassType;

private:
  friend class Navigation_Class;
  static CppClassType navigation_class_;

  // noncopyable
  Navigation(const Navigation&);
  Navigation& operator=(const Navigation&);

protected:
  Navigation(); // you must derive from this class

  /** Called by constructors of derived classes. Provide the result of 
   * the Class init() function to ensure that it is properly 
   * initialized.
   * 
   * @param interface_class The Class object for the derived type.
   */
  explicit Navigation(const Glib::Interface_Class& interface_class);

public:
  // This is public so that C++ wrapper instances can be
  // created for C instances of unwrapped types.
  // For instance, if an unexpected C type implements the C interface. 
  explicit Navigation(GstNavigation* castitem);

protected:
#endif /* DOXYGEN_SHOULD_SKIP_THIS */

public:
  virtual ~Navigation();

  static void add_interface(GType gtype_implementer);

#ifndef DOXYGEN_SHOULD_SKIP_THIS
  static GType get_type()      G_GNUC_CONST;
  static GType get_base_type() G_GNUC_CONST;
#endif

  ///Provides access to the underlying C GObject.
  GstNavigation*       gobj()       { return reinterpret_cast<GstNavigation*>(gobject_); }

  ///Provides access to the underlying C GObject.
  const GstNavigation* gobj() const { return reinterpret_cast<GstNavigation*>(gobject_); }

private:


public:
  
  void send_event(Gst::Structure& structure);
  
  /** 
   * @param event The type of the key event. Recognised values are "key-press" and
   * "key-release".
   * @param key Character representation of the key. This is typically as produced
   * by XKeysymToString.
   */
  void send_key_event(const Glib::ustring& event, const Glib::ustring& key);
  
  /** Sends a mouse event to the navigation interface. Mouse event coordinates
   * are sent relative to the display space of the related output area. This is
   * usually the size in pixels of the window associated with the element
   * implementing the Gst::Navigation interface.
   * @param event The type of mouse event, as a text string. Recognised values are
   * "mouse-button-press", "mouse-button-release" and "mouse-move".
   * @param button The button number of the button being pressed or released. Pass 0
   * for mouse-move events.
   * @param x The x coordinate of the mouse event.
   * @param y The y coordinate of the mouse event.
   */
  void send_mouse_event(const Glib::ustring& event, int button, double x, double y);
  
  /** Sends the indicated command to the navigation interface.
   * @param command The command to issue.
   */
  void send_command(Gst::NavigationCommand command);

  /** Called when an event has been sent to the Gst::Navigation.
   */
  virtual void send_event_vfunc(Gst::Structure& structure);

protected:

  
public:

public:
  //C++ methods used to invoke GTK+ virtual functions:

protected:
  //GTK+ Virtual Functions (override these to change behaviour):

  //Default Signal Handlers::


};

} // namespace Gst


namespace Glib
{
  /** A Glib::wrap() method for this object.
   * 
   * @param object The C instance.
   * @param take_copy False if the result should take ownership of the C instance. True if it should take a new copy or ref.
   * @result A C++ instance that wraps this C instance.
   *
   * @relates Gst::Navigation
   */
  Glib::RefPtr<Gst::Navigation> wrap(GstNavigation* object, bool take_copy = false);

} // namespace Glib


#endif /* _GSTREAMERMM_NAVIGATION_H */

