// -*- c++ -*-
// Generated by gtkmmproc -- DO NOT MODIFY!
#ifndef _GSTREAMERMM_VIDEOSINK_H
#define _GSTREAMERMM_VIDEOSINK_H


#include <glibmm.h>

/* gstreamermm - a C++ wrapper for gstreamer
 *
 * Copyright 2008 The gstreamermm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#include <gstreamermm/basesink.h>


#ifndef DOXYGEN_SHOULD_SKIP_THIS
typedef struct _GstVideoSink GstVideoSink;
typedef struct _GstVideoSinkClass GstVideoSinkClass;
#endif /* DOXYGEN_SHOULD_SKIP_THIS */


namespace Gst
{ class VideoSink_Class; } // namespace Gst
namespace Gst
{

/** A helper structure for the Gst::VideoSink class representing a rectangular
 * area.
 */
struct VideoRectangle
{
  /// The X coordinate of the rectangle's top-left point.
  int x;

  /// The Y coordinate of rectangle's top-left point.
  int y;

  /// The width of the rectangle.
  int w;

  /// The height of the rectangle.
  int h;
};

/** A base class for video sinks.
 * Gst::VideoSink provides useful functions and a base class for video sinks.
 *
 * Gst::VideoSink will configure the default base sink to drop frames that
 * arrive later than 20ms as this is considered the default threshold for
 * observing out-of-sync frames. 
 *
 * @ingroup GstBaseClasses
 */

class VideoSink : public Gst::BaseSink
{
  
#ifndef DOXYGEN_SHOULD_SKIP_THIS

public:
  typedef VideoSink CppObjectType;
  typedef VideoSink_Class CppClassType;
  typedef GstVideoSink BaseObjectType;
  typedef GstVideoSinkClass BaseClassType;

private:  friend class VideoSink_Class;
  static CppClassType videosink_class_;

private:
  // noncopyable
  VideoSink(const VideoSink&);
  VideoSink& operator=(const VideoSink&);

protected:
  explicit VideoSink(const Glib::ConstructParams& construct_params);
  explicit VideoSink(GstVideoSink* castitem);

#endif /* DOXYGEN_SHOULD_SKIP_THIS */

public:
  virtual ~VideoSink();

#ifndef DOXYGEN_SHOULD_SKIP_THIS
  static GType get_type()      G_GNUC_CONST;


  static GType get_base_type() G_GNUC_CONST;
#endif

  ///Provides access to the underlying C GObject.
  GstVideoSink*       gobj()       { return reinterpret_cast<GstVideoSink*>(gobject_); }

  ///Provides access to the underlying C GObject.
  const GstVideoSink* gobj() const { return reinterpret_cast<GstVideoSink*>(gobject_); }

  ///Provides access to the underlying C instance. The caller is responsible for unrefing it. Use when directly setting fields in structs.
  GstVideoSink* gobj_copy();

private:


public:
  /** Get height of Gst::VideoSink.
   */
   int get_height() const;
 
  /** Get width of Gst::VideoSink.
   */
   int get_width() const;
 
 
  /** Takes @a src rectangle and position it at the center of @a dst rectangle with or
   * without @a scaling. It handles clipping if the @a src rectangle is bigger than
   * the @a dst one and @a scaling is set to <tt>false</tt>.
   * @param src The Gst::VideoRectangle describing the source area.
   * @param dst The Gst::VideoRectangle describing the destination area.
   * @param result A pointer to a Gst::VideoRectangle which will receive the result area.
   * @param scaling A <tt>bool</tt> indicating if scaling should be applied or not.
   */
  static void center_rect(const Gst::VideoRectangle& src, const Gst::VideoRectangle& dst, Gst::VideoRectangle& result, bool scaling =  false);

  #ifdef GLIBMM_PROPERTIES_ENABLED
/** Whether to render video frames during preroll.
   *
   * You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   */
  Glib::PropertyProxy<bool> property_show_preroll_frame() ;
#endif //#GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
/** Whether to render video frames during preroll.
   *
   * You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly<bool> property_show_preroll_frame() const;
#endif //#GLIBMM_PROPERTIES_ENABLED


public:

public:
  //C++ methods used to invoke GTK+ virtual functions:

protected:
  //GTK+ Virtual Functions (override these to change behaviour):

  //Default Signal Handlers::


};

} // namespace Gst


namespace Glib
{
  /** A Glib::wrap() method for this object.
   * 
   * @param object The C instance.
   * @param take_copy False if the result should take ownership of the C instance. True if it should take a new copy or ref.
   * @result A C++ instance that wraps this C instance.
   *
   * @relates Gst::VideoSink
   */
  Glib::RefPtr<Gst::VideoSink> wrap(GstVideoSink* object, bool take_copy = false);
}


#endif /* _GSTREAMERMM_VIDEOSINK_H */

