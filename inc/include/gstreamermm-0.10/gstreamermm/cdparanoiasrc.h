// -*- c++ -*-
// Generated by gtkmmproc -- DO NOT MODIFY!
#ifndef _GSTREAMERMM_CDPARANOIASRC_H
#define _GSTREAMERMM_CDPARANOIASRC_H


#include <glibmm.h>

// Generated by generate_plugin_gmmproc_file. Don't edit this file.


#include <gstreamermm/pushsrc.h>


#ifndef DOXYGEN_SHOULD_SKIP_THIS
typedef struct _GstCdParanoiaSrc GstCdParanoiaSrc;
typedef struct _GstCdParanoiaSrcClass GstCdParanoiaSrcClass;
#endif /* DOXYGEN_SHOULD_SKIP_THIS */


namespace Gst
{ class CdParanoiaSrc_Class; } // namespace Gst
namespace Gst
{

/** @addtogroup gstreamermmEnums gstreamermm Enums and Flags */

/**
 * @ingroup gstreamermmEnums
 */
enum CdParanoiaMode
{
  PARANOIA_MODE_DISABLE = 1<<0,
  PARANOIA_MODE_FRAGMENT = 1<<1,
  PARANOIA_MODE_OVERLAP = 1<<2,
  PARANOIA_MODE_SCRATCH = 1<<3,
  PARANOIA_MODE_REPAIR = 1<<4,
  PARANOIA_MODE_FULL = 0xff
};

} // namespace Gst


#ifndef DOXYGEN_SHOULD_SKIP_THIS
namespace Glib
{

template <>
class Value<Gst::CdParanoiaMode> : public Glib::Value_Enum<Gst::CdParanoiaMode>
{
public:
  static GType value_type() G_GNUC_CONST;
};

} // namespace Glib
#endif /* DOXYGEN_SHOULD_SKIP_THIS */


namespace Gst
{


/** A Wrapper for the cdparanoiasrc plugin.
 * Please note that, though using the underlying GObject is fine, using its C
 * <B>type</B> is not guaranteed to be API stable across releases because it is
 * not guaranteed to always remain the same.  Also, not all plug-ins are
 * available on all systems so care must be taken that they exist before they
 * are used, otherwise there will be errors and possibly a crash.
 *
 * @ingroup GstPlugins
 */

class CdParanoiaSrc
: public Gst::PushSrc
{
  
#ifndef DOXYGEN_SHOULD_SKIP_THIS

public:
  typedef CdParanoiaSrc CppObjectType;
  typedef CdParanoiaSrc_Class CppClassType;
  typedef GstCdParanoiaSrc BaseObjectType;
  typedef GstCdParanoiaSrcClass BaseClassType;

private:  friend class CdParanoiaSrc_Class;
  static CppClassType cdparanoiasrc_class_;

private:
  // noncopyable
  CdParanoiaSrc(const CdParanoiaSrc&);
  CdParanoiaSrc& operator=(const CdParanoiaSrc&);

protected:
  explicit CdParanoiaSrc(const Glib::ConstructParams& construct_params);
  explicit CdParanoiaSrc(GstCdParanoiaSrc* castitem);

#endif /* DOXYGEN_SHOULD_SKIP_THIS */

public:
  virtual ~CdParanoiaSrc();

#ifndef DOXYGEN_SHOULD_SKIP_THIS
  static GType get_type()      G_GNUC_CONST;


  static GType get_base_type() G_GNUC_CONST;
#endif

  ///Provides access to the underlying C GObject.
  GstCdParanoiaSrc*       gobj()       { return reinterpret_cast<GstCdParanoiaSrc*>(gobject_); }

  ///Provides access to the underlying C GObject.
  const GstCdParanoiaSrc* gobj() const { return reinterpret_cast<GstCdParanoiaSrc*>(gobject_); }

  ///Provides access to the underlying C instance. The caller is responsible for unrefing it. Use when directly setting fields in structs.
  GstCdParanoiaSrc* gobj_copy();

private:

  
protected:
  CdParanoiaSrc();
  explicit CdParanoiaSrc(const Glib::ustring& name);

public:
  /** Creates a new cdparanoiasrc plugin with a unique name.
   */
  
  static Glib::RefPtr<CdParanoiaSrc> create();


  /** Creates a new cdparanoiasrc plugin with the given name.
   */
  
  static Glib::RefPtr<CdParanoiaSrc> create(const Glib::ustring& name);


  #ifdef GLIBMM_PROPERTIES_ENABLED
/** Read from device at specified speed.
   *
   * You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   */
  Glib::PropertyProxy<int> property_read_speed() ;
#endif //#GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
/** Read from device at specified speed.
   *
   * You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly<int> property_read_speed() const;
#endif //#GLIBMM_PROPERTIES_ENABLED

  #ifdef GLIBMM_PROPERTIES_ENABLED
/** Type of checking to perform.
   *
   * You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   */
  Glib::PropertyProxy<Gst::CdParanoiaMode> property_paranoia_mode() ;
#endif //#GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
/** Type of checking to perform.
   *
   * You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly<Gst::CdParanoiaMode> property_paranoia_mode() const;
#endif //#GLIBMM_PROPERTIES_ENABLED

  #ifdef GLIBMM_PROPERTIES_ENABLED
/** Force minimum overlap search during verification to n sectors.
   *
   * You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   */
  Glib::PropertyProxy<int> property_search_overlap() ;
#endif //#GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
/** Force minimum overlap search during verification to n sectors.
   *
   * You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly<int> property_search_overlap() const;
#endif //#GLIBMM_PROPERTIES_ENABLED

  #ifdef GLIBMM_PROPERTIES_ENABLED
/** Use specified generic scsi device.
   *
   * You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   */
  Glib::PropertyProxy<Glib::ustring> property_generic_device() ;
#endif //#GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
/** Use specified generic scsi device.
   *
   * You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly<Glib::ustring> property_generic_device() const;
#endif //#GLIBMM_PROPERTIES_ENABLED

  #ifdef GLIBMM_PROPERTIES_ENABLED
/** Set CD cache size to n sectors (-1 = auto).
   *
   * You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   */
  Glib::PropertyProxy<int> property_cache_size() ;
#endif //#GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
/** Set CD cache size to n sectors (-1 = auto).
   *
   * You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly<int> property_cache_size() const;
#endif //#GLIBMM_PROPERTIES_ENABLED


  /**
   * @par Prototype:
   * <tt>void on_my_%transport_error(int arg0)</tt>
   */

  Glib::SignalProxy1< void,int > signal_transport_error();

  
  /**
   * @par Prototype:
   * <tt>void on_my_%uncorrected_error(int arg0)</tt>
   */

  Glib::SignalProxy1< void,int > signal_uncorrected_error();


public:

public:
  //C++ methods used to invoke GTK+ virtual functions:

protected:
  //GTK+ Virtual Functions (override these to change behaviour):

  //Default Signal Handlers::


};

} // namespace Gst


namespace Glib
{
  /** A Glib::wrap() method for this object.
   * 
   * @param object The C instance.
   * @param take_copy False if the result should take ownership of the C instance. True if it should take a new copy or ref.
   * @result A C++ instance that wraps this C instance.
   *
   * @relates Gst::CdParanoiaSrc
   */
  Glib::RefPtr<Gst::CdParanoiaSrc> wrap(GstCdParanoiaSrc* object, bool take_copy = false);
}


#endif /* _GSTREAMERMM_CDPARANOIASRC_H */

