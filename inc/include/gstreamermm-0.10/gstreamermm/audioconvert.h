// -*- c++ -*-
// Generated by gtkmmproc -- DO NOT MODIFY!
#ifndef _GSTREAMERMM_AUDIOCONVERT_H
#define _GSTREAMERMM_AUDIOCONVERT_H


#include <glibmm.h>

// Generated by generate_plugin_gmmproc_file. Don't edit this file.


#include <gstreamermm/basetransform.h>


#ifndef DOXYGEN_SHOULD_SKIP_THIS
typedef struct _GstAudioConvert GstAudioConvert;
typedef struct _GstAudioConvertClass GstAudioConvertClass;
#endif /* DOXYGEN_SHOULD_SKIP_THIS */


namespace Gst
{ class AudioConvert_Class; } // namespace Gst
namespace Gst
{

/** @addtogroup gstreamermmEnums gstreamermm Enums and Flags */

/**
 * @ingroup gstreamermmEnums
 */
enum AudioConvertDithering
{
  AUDIO_CONVERT_DITHER_NONE,
  AUDIO_CONVERT_DITHER_RPDF,
  AUDIO_CONVERT_DITHER_TPDF,
  AUDIO_CONVERT_DITHER_TPDF_HF
};

} // namespace Gst


#ifndef DOXYGEN_SHOULD_SKIP_THIS
namespace Glib
{

template <>
class Value<Gst::AudioConvertDithering> : public Glib::Value_Enum<Gst::AudioConvertDithering>
{
public:
  static GType value_type() G_GNUC_CONST;
};

} // namespace Glib
#endif /* DOXYGEN_SHOULD_SKIP_THIS */


namespace Gst
{


/**
 * @ingroup gstreamermmEnums
 */
enum AudioConvertNoiseShaping
{
  AUDIO_CONVERT_NOISE_SHAPING_NONE,
  AUDIO_CONVERT_NOISE_SHAPING_ERROR_FEEDBACK,
  AUDIO_CONVERT_NOISE_SHAPING_SIMPLE,
  AUDIO_CONVERT_NOISE_SHAPING_MEDIUM,
  AUDIO_CONVERT_NOISE_SHAPING_HIGH
};

} // namespace Gst


#ifndef DOXYGEN_SHOULD_SKIP_THIS
namespace Glib
{

template <>
class Value<Gst::AudioConvertNoiseShaping> : public Glib::Value_Enum<Gst::AudioConvertNoiseShaping>
{
public:
  static GType value_type() G_GNUC_CONST;
};

} // namespace Glib
#endif /* DOXYGEN_SHOULD_SKIP_THIS */


namespace Gst
{


/** A Wrapper for the audioconvert plugin.
 * Please note that, though using the underlying GObject is fine, using its C
 * <B>type</B> is not guaranteed to be API stable across releases because it is
 * not guaranteed to always remain the same.  Also, not all plug-ins are
 * available on all systems so care must be taken that they exist before they
 * are used, otherwise there will be errors and possibly a crash.
 *
 * @ingroup GstPlugins
 */

class AudioConvert
: public Gst::BaseTransform
{
  
#ifndef DOXYGEN_SHOULD_SKIP_THIS

public:
  typedef AudioConvert CppObjectType;
  typedef AudioConvert_Class CppClassType;
  typedef GstAudioConvert BaseObjectType;
  typedef GstAudioConvertClass BaseClassType;

private:  friend class AudioConvert_Class;
  static CppClassType audioconvert_class_;

private:
  // noncopyable
  AudioConvert(const AudioConvert&);
  AudioConvert& operator=(const AudioConvert&);

protected:
  explicit AudioConvert(const Glib::ConstructParams& construct_params);
  explicit AudioConvert(GstAudioConvert* castitem);

#endif /* DOXYGEN_SHOULD_SKIP_THIS */

public:
  virtual ~AudioConvert();

#ifndef DOXYGEN_SHOULD_SKIP_THIS
  static GType get_type()      G_GNUC_CONST;


  static GType get_base_type() G_GNUC_CONST;
#endif

  ///Provides access to the underlying C GObject.
  GstAudioConvert*       gobj()       { return reinterpret_cast<GstAudioConvert*>(gobject_); }

  ///Provides access to the underlying C GObject.
  const GstAudioConvert* gobj() const { return reinterpret_cast<GstAudioConvert*>(gobject_); }

  ///Provides access to the underlying C instance. The caller is responsible for unrefing it. Use when directly setting fields in structs.
  GstAudioConvert* gobj_copy();

private:

  
protected:
  AudioConvert();
  explicit AudioConvert(const Glib::ustring& name);

public:
  /** Creates a new audioconvert plugin with a unique name.
   */
  
  static Glib::RefPtr<AudioConvert> create();


  /** Creates a new audioconvert plugin with the given name.
   */
  
  static Glib::RefPtr<AudioConvert> create(const Glib::ustring& name);


  #ifdef GLIBMM_PROPERTIES_ENABLED
/** Selects between different dithering methods.
   *
   * You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   */
  Glib::PropertyProxy<Gst::AudioConvertDithering> property_dithering() ;
#endif //#GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
/** Selects between different dithering methods.
   *
   * You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly<Gst::AudioConvertDithering> property_dithering() const;
#endif //#GLIBMM_PROPERTIES_ENABLED

  #ifdef GLIBMM_PROPERTIES_ENABLED
/** Selects between different noise shaping methods.
   *
   * You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   */
  Glib::PropertyProxy<Gst::AudioConvertNoiseShaping> property_noise_shaping() ;
#endif //#GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
/** Selects between different noise shaping methods.
   *
   * You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly<Gst::AudioConvertNoiseShaping> property_noise_shaping() const;
#endif //#GLIBMM_PROPERTIES_ENABLED


public:

public:
  //C++ methods used to invoke GTK+ virtual functions:

protected:
  //GTK+ Virtual Functions (override these to change behaviour):

  //Default Signal Handlers::


};

} // namespace Gst


namespace Glib
{
  /** A Glib::wrap() method for this object.
   * 
   * @param object The C instance.
   * @param take_copy False if the result should take ownership of the C instance. True if it should take a new copy or ref.
   * @result A C++ instance that wraps this C instance.
   *
   * @relates Gst::AudioConvert
   */
  Glib::RefPtr<Gst::AudioConvert> wrap(GstAudioConvert* object, bool take_copy = false);
}


#endif /* _GSTREAMERMM_AUDIOCONVERT_H */

