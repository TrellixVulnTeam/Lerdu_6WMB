// -*- c++ -*-
// Generated by gtkmmproc -- DO NOT MODIFY!
#ifndef _GSTREAMERMM_TUNERNORM_H
#define _GSTREAMERMM_TUNERNORM_H


#include <glibmm.h>

/* gstreamermm - a C++ wrapper for gstreamer
 *
 * Copyright 2008 The gstreamermm Development Team
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free
 * Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#include <glibmm/object.h>


#ifndef DOXYGEN_SHOULD_SKIP_THIS
typedef struct _GstTunerNorm GstTunerNorm;
typedef struct _GstTunerNormClass GstTunerNormClass;
#endif /* DOXYGEN_SHOULD_SKIP_THIS */


namespace Gst
{ class TunerNorm_Class; } // namespace Gst
namespace Gst
{

class Fraction;

/** A class that encapsulates information about the data format(s) for a
 * Gst::TunerChannel.
 * @ingroup GstInterfaces
 */

class TunerNorm : public Glib::Object
{
  
#ifndef DOXYGEN_SHOULD_SKIP_THIS

public:
  typedef TunerNorm CppObjectType;
  typedef TunerNorm_Class CppClassType;
  typedef GstTunerNorm BaseObjectType;
  typedef GstTunerNormClass BaseClassType;

private:  friend class TunerNorm_Class;
  static CppClassType tunernorm_class_;

private:
  // noncopyable
  TunerNorm(const TunerNorm&);
  TunerNorm& operator=(const TunerNorm&);

protected:
  explicit TunerNorm(const Glib::ConstructParams& construct_params);
  explicit TunerNorm(GstTunerNorm* castitem);

#endif /* DOXYGEN_SHOULD_SKIP_THIS */

public:
  virtual ~TunerNorm();

#ifndef DOXYGEN_SHOULD_SKIP_THIS
  static GType get_type()      G_GNUC_CONST;


  static GType get_base_type() G_GNUC_CONST;
#endif

  ///Provides access to the underlying C GObject.
  GstTunerNorm*       gobj()       { return reinterpret_cast<GstTunerNorm*>(gobject_); }

  ///Provides access to the underlying C GObject.
  const GstTunerNorm* gobj() const { return reinterpret_cast<GstTunerNorm*>(gobject_); }

  ///Provides access to the underlying C instance. The caller is responsible for unrefing it. Use when directly setting fields in structs.
  GstTunerNorm* gobj_copy();

private:

public:
  /** Get a string containing a descriptive name for the norm.
   */
   Glib::ustring get_label() const;
 
 
  /** Get the framerate associated with this norm, if any. (May be unset).  If
   * it is not set the value will be 0/1.
   */
   Gst::Fraction get_framerate() const;
 

public:

public:
  //C++ methods used to invoke GTK+ virtual functions:

protected:
  //GTK+ Virtual Functions (override these to change behaviour):

  //Default Signal Handlers::


};

} // namespace Gst


namespace Glib
{
  /** A Glib::wrap() method for this object.
   * 
   * @param object The C instance.
   * @param take_copy False if the result should take ownership of the C instance. True if it should take a new copy or ref.
   * @result A C++ instance that wraps this C instance.
   *
   * @relates Gst::TunerNorm
   */
  Glib::RefPtr<Gst::TunerNorm> wrap(GstTunerNorm* object, bool take_copy = false);
}


#endif /* _GSTREAMERMM_TUNERNORM_H */

