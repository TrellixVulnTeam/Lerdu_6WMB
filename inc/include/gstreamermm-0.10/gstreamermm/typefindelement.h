// -*- c++ -*-
// Generated by gtkmmproc -- DO NOT MODIFY!
#ifndef _GSTREAMERMM_TYPEFINDELEMENT_H
#define _GSTREAMERMM_TYPEFINDELEMENT_H


#include <glibmm.h>

// Generated by generate_plugin_gmmproc_file. Don't edit this file.


#include <gstreamermm/element.h>
#include <gstreamermm/caps.h>


#ifndef DOXYGEN_SHOULD_SKIP_THIS
typedef struct _GstTypeFindElement GstTypeFindElement;
typedef struct _GstTypeFindElementClass GstTypeFindElementClass;
#endif /* DOXYGEN_SHOULD_SKIP_THIS */


namespace Gst
{ class TypeFindElement_Class; } // namespace Gst
namespace Gst
{

/** A Wrapper for the typefind plugin.
 * Please note that, though using the underlying GObject is fine, using its C
 * <B>type</B> is not guaranteed to be API stable across releases because it is
 * not guaranteed to always remain the same.  Also, not all plug-ins are
 * available on all systems so care must be taken that they exist before they
 * are used, otherwise there will be errors and possibly a crash.
 *
 * @ingroup GstPlugins
 */

class TypeFindElement
: public Gst::Element
{
  
#ifndef DOXYGEN_SHOULD_SKIP_THIS

public:
  typedef TypeFindElement CppObjectType;
  typedef TypeFindElement_Class CppClassType;
  typedef GstTypeFindElement BaseObjectType;
  typedef GstTypeFindElementClass BaseClassType;

private:  friend class TypeFindElement_Class;
  static CppClassType typefindelement_class_;

private:
  // noncopyable
  TypeFindElement(const TypeFindElement&);
  TypeFindElement& operator=(const TypeFindElement&);

protected:
  explicit TypeFindElement(const Glib::ConstructParams& construct_params);
  explicit TypeFindElement(GstTypeFindElement* castitem);

#endif /* DOXYGEN_SHOULD_SKIP_THIS */

public:
  virtual ~TypeFindElement();

#ifndef DOXYGEN_SHOULD_SKIP_THIS
  static GType get_type()      G_GNUC_CONST;


  static GType get_base_type() G_GNUC_CONST;
#endif

  ///Provides access to the underlying C GObject.
  GstTypeFindElement*       gobj()       { return reinterpret_cast<GstTypeFindElement*>(gobject_); }

  ///Provides access to the underlying C GObject.
  const GstTypeFindElement* gobj() const { return reinterpret_cast<GstTypeFindElement*>(gobject_); }

  ///Provides access to the underlying C instance. The caller is responsible for unrefing it. Use when directly setting fields in structs.
  GstTypeFindElement* gobj_copy();

private:

  
protected:
  TypeFindElement();
  explicit TypeFindElement(const Glib::ustring& name);

public:
  /** Creates a new typefind plugin with a unique name.
   */
  
  static Glib::RefPtr<TypeFindElement> create();


  /** Creates a new typefind plugin with the given name.
   */
  
  static Glib::RefPtr<TypeFindElement> create(const Glib::ustring& name);


  #ifdef GLIBMM_PROPERTIES_ENABLED
/** detected capabilities in stream.
   *
   * You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< Glib::RefPtr<Gst::Caps> > property_caps() const;
#endif //#GLIBMM_PROPERTIES_ENABLED


  #ifdef GLIBMM_PROPERTIES_ENABLED
/** minimum probability required to accept caps.
   *
   * You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   */
  Glib::PropertyProxy<guint> property_minimum() ;
#endif //#GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
/** minimum probability required to accept caps.
   *
   * You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly<guint> property_minimum() const;
#endif //#GLIBMM_PROPERTIES_ENABLED

  #ifdef GLIBMM_PROPERTIES_ENABLED
/** probability to stop typefinding (deprecated; non-functional).
   *
   * You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   */
  Glib::PropertyProxy<guint> property_maximum() ;
#endif //#GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
/** probability to stop typefinding (deprecated; non-functional).
   *
   * You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly<guint> property_maximum() const;
#endif //#GLIBMM_PROPERTIES_ENABLED

  #ifdef GLIBMM_PROPERTIES_ENABLED
/** force caps without doing a typefind.
   *
   * You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   */
  Glib::PropertyProxy< Glib::RefPtr<Gst::Caps> > property_force_caps() ;
#endif //#GLIBMM_PROPERTIES_ENABLED

#ifdef GLIBMM_PROPERTIES_ENABLED
/** force caps without doing a typefind.
   *
   * You rarely need to use properties because there are get_ and set_ methods for almost all of them.
   * @return A PropertyProxy that allows you to get or set the property of the value, or receive notification when
   * the value of the property changes.
   */
  Glib::PropertyProxy_ReadOnly< Glib::RefPtr<Gst::Caps> > property_force_caps() const;
#endif //#GLIBMM_PROPERTIES_ENABLED


  /**
   * @par Prototype:
   * <tt>void on_my_%have_type(guint arg0, const Glib::RefPtr<Gst::Caps>& arg1)</tt>
   */

  Glib::SignalProxy2< void,guint,const Glib::RefPtr<Gst::Caps>& > signal_have_type();


public:

public:
  //C++ methods used to invoke GTK+ virtual functions:

protected:
  //GTK+ Virtual Functions (override these to change behaviour):

  //Default Signal Handlers::


};

} // namespace Gst


namespace Glib
{
  /** A Glib::wrap() method for this object.
   * 
   * @param object The C instance.
   * @param take_copy False if the result should take ownership of the C instance. True if it should take a new copy or ref.
   * @result A C++ instance that wraps this C instance.
   *
   * @relates Gst::TypeFindElement
   */
  Glib::RefPtr<Gst::TypeFindElement> wrap(GstTypeFindElement* object, bool take_copy = false);
}


#endif /* _GSTREAMERMM_TYPEFINDELEMENT_H */

